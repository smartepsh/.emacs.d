:PROPERTIES:
:ID:       52F81E86-D8C4-4A74-B8C4-EE0A32CA7100
:header-args: :tangle "~/.emacs.d/init.el"
:END:
#+title: init.el

* 背景
  =spacemacs= 入坑，经过大约三四年的使用，终于可以算是摸到了门槛。之前一直使用 =evil= 来模拟 vim 模式，随着使用的时间越长，依赖的插件越多，evil 带来的弊端也逐渐显现出来：
  - 每一个插件除非有支持，不然都需要自定义按键，配合双 leader 系统，任务繁重。。。
  - 对于不同的 mode-map 可能有想同的按键映射，emasc 采用 =1 major + n minor= 模式，很容易产生按键冲突
  - 过重

  让我萌生了更换输入模式的想法。此时恰巧看到了[[https://emacs-china.org/t/meow/15679][猫态编辑：Meow - Emacs-general - Emacs China]] 这个模式，被描述吸引，决定尝试。

  同时经过几年的使用，逐渐对原有在 =懵懂= 状态下进行的配置有了重构之心，故借此机会，同时使用 org-mode ，尽可能记录下配置生成的点点滴滴。

** 使用 org mode 记录配置
   很多人使用 emacs 都是因为 org mode 入的坑，可见其厉害之处。本篇记录使用 =org-tangle= 将包含的 source block 依序拼接(=tangle=)为一个文件。这里默认会导出为 org 文件的同名文件，需要设置。

   #+begin_src emacs-lisp :tangle no
     :PROPERTIES:
     :header-args: :tangle "~/.emacs.d/init.el"
     :END:
   #+end_src

   此处我们直接输出配置到 =~/.emacs.d/init.el= 文件，意味着需要手动更新输出，新配置才可能生效。当然也可以直接更改此文件，但在下次导出时，会被覆盖，所以请不要这么做。

* 基础设置
** 计算启动时间
 #+begin_src emacs-lisp
   (setq emacs-start-time (current-time))
   (add-hook 'window-setup-hook '(lambda ()
                                   (message
                                    (format "Emacs startup in %.3f seconds"
                                            (float-time
                                             (time-subtract
                                              (current-time)
                                              emacs-start-time))))))
 #+end_src
** 编译设置
 #+begin_src emacs-lisp
   (setq comp-async-jobs-number 5
         comp-deferred-compilation t
         native-comp-async-report-warnings-errors nil)
 #+end_src
** 系统及文件夹路径设置
 #+begin_src emacs-lisp
   (setq private/cache-directory "~/.emacs.d/.cache/"
         private/system-is-mac (eq system-type 'darwin)
         private/config-directory "~/.emacs.d/"
         custom-file "~/.emacs.d/custom.el")
 #+end_src
** 自定义文件及载入设置
 #+begin_src emacs-lisp
   (setq custom-file "~/.emacs.d/custom.el")
   (if (file-exists-p custom-file)
       (load custom-file)
     (message "no custom setting file!"))
 #+end_src
** 当光标滚动超出屏幕的时候，不再使目标行居中
  #+begin_src emacs-lisp
    (setq scroll-conservatively 101
          scroll-preserve-screen-position t)
  #+end_src
** 不再有提示音
  #+begin_src emacs-lisp
    (setq ring-bell-function 'ignore)
  #+end_src
** 替换 yes no
   #+begin_src emacs-lisp
     (fset #'yes-or-no-p #'y-or-n-p)
   #+end_src
** 编辑相关设置
   #+begin_src emacs-lisp
     (set-default-coding-systems 'utf-8-unix)
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
     (setq tab-width 2
           auto-save-default nil
           make-backup-file nil
           create-lockfiles nil
           x-select-enable-clipboard nil)
   #+end_src
** 翻墙（虽然一般不怎么用）
   #+begin_src emacs-lisp
     (defun goproxy()
       (interactive)
       (setq url-proxy-services '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
                                  ("http" . "192.168.50.111:8118")
                                  ("https" . "192.168.50.111:8118"))))

     (defun disproxy()
       (interactive)
       (setq url-proxy-services nil))
   #+end_src
** mac 修时键配置
   #+begin_src emacs-lisp
     (setq ns-command-modifier 'super
           ns-option-modifer 'meta
           ns-right-option-modifier 'hyper
           ns-right-command-modifier 'hyper)
   #+end_src
* 包管理
  我们使用 [[https://github.com/jwiegley/use-package][jwiegley/use-package]] 进行 melpa 包管理，同时配合 [[https://github.com/quelpa/quelpa][quelpa/quelpa]] 进行源码包管理（含 github），并使用 [[https://github.com/Silex/package-utils][Silex/package-utils]] 提供 helper 方便使用。
  #+begin_src emacs-lisp
    (setq package-native-compile t
          use-package-expand-minimally t
          use-package-always-ensure t
          package-enable-at-startup nil
          package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org"   . "https://orgmode.org/elpa/")
                             ("gnu"   . "https://elpa.gnu.org/packages/")))
    ;; This is only needed once, near the top of the file
    (eval-when-compile
      (require 'use-package))

    ;; disable update during quelpa initialized
    (setq quelpa-update-melpa-p nil
          quelpa-checkout-melpa-p t)

    ;; install quelpa
    (unless (package-installed-p 'quelpa)
      (with-temp-buffer
        (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
        (eval-buffer)
        (quelpa-self-upgrade)))

    ;; install quelpa-use-package
    (quelpa
     '(quelpa-use-package
       :fetcher git
       :url "https://github.com/quelpa/quelpa-use-package.git"))

    (require 'quelpa-use-package)
    (quelpa-use-package-activate-advice)

    (use-package benchmark-init
      :config
      (add-hook 'after-init-hook 'benchmark-init/deactivate))

    (use-package package-utils
      :defer t)
  #+end_src
* 环境变量
  #+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize))
  #+end_src
* 输入方案
  #+begin_src emacs-lisp
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev))
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION sitch-tate.
       '("j" . meow-motion-origin-command)
       '("k" . meow-motion-origin-command)
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("C" . meow-change-save)
       '("d" . meow-C-d)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("F" . meow-find-expand)
       '("g" . meow-cancel)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("N" . meow-pop-search)
       '("o" . meow-block)
       '("O" . meow-block-expand)
       '("p" . meow-yank)
       '("P" . meow-yank-pop)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("T" . meow-till-expand)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("V" . meow-kmacro-matches)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-kmacro-lines)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("Z" . meow-pop-all-selection)
       '("&" . meow-query-replace)
       '("%" . meow-query-replace-regexp)
       '("'" . repeat)
       '("\\" . quoted-insert)
       '("<escape>" . meow-last-buffer)))

    (use-package meow
      :demand t
      :init
      (meow-global-mode t)
      :config
      (meow-setup))
  #+end_src
* 外观
** modeline
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :init
       (doom-modeline-mode t)
       :config
       ;;disable git status
       (setq doom-modeline-vcs-max-length 0))
   #+end_src
** theme
   #+begin_src emacs-lisp
     (use-package doom-themes
       :init
       (setq doom-themes-enable-bold t
             doom-themes-enable-italic t)
       (load-theme 'doom-one t))
   #+end_src

** 关闭滚动条和工具条
   #+begin_src emacs-lisp
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
   #+end_src

** 彩色括号及高亮TODO
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))

     (use-package hl-todo
       :hook (prog-mode . hl-todo-mode))
   #+end_src
** posframe
   #+begin_src emacs-lisp
     (use-package posframe
       :defer t)
   #+end_src
** 不显示欢迎界面
   #+begin_src emacs-lisp
     (setq inhibit-startup-screen t)
   #+end_src
* 按键绑定
   #+begin_src emacs-lisp
     (use-package general
       :config
       (general-auto-unbind-keys))
   #+end_src
* 窗口管理
   #+begin_src emacs-lisp
     (use-package centaur-tabs
       :config
       (general-define-key
        "s-d" 'switch-window-then-split-right
        "s-w" 'switch-window-then-delete
        "s-1" 'centaur-tabs-select-visible-tab
        "s-2" 'centaur-tabs-select-visible-tab
        "s-3" 'centaur-tabs-select-visible-tab
        "s-4" 'centaur-tabs-select-visible-tab
        "s-5" 'centaur-tabs-select-visible-tab
        "s-6" 'centaur-tabs-select-visible-tab
        "s-7" 'centaur-tabs-select-visible-tab
        "s-t" 'centaur-tabs--create-new-tab)
       ;;;(setq switch-window-input-style 'minibuffer)
       ;;;(setq switch-window-minibuffer-shortcut ?m)
       (centaur-tabs-mode t)
       (setq centaur-tabs-height 20
             centaur-tabs-set-bar 'left
             centaur-tabs-close-button "x"
             centaur-tabs-set-close-button nil
             ;;centaur-tabs--buffer-show-groups t
             centaur-tabs-set-modified-marker t
             ;;centaur-tabs-label-fixed-length 10
             centaur-tabs-set-icons t))
     (use-package eyebrowse
       :defer t
       :init
       (add-hook 'after-init-hook #'eyebrowse-mode)
       (setq eyebrowse-keymap-prefix "")
       :config
       (general-define-key
        "H-1" 'eyebrowse-switch-to-window-config-1
        "H-2" 'eyebrowse-switch-to-window-config-2
        "H-3" 'eyebrowse-switch-to-window-config-3
        "H-4" 'eyebrowse-switch-to-window-config-4
        "H-5" 'eyebrowse-switch-to-window-config-5
        "H-6" 'eyebrowse-switch-to-window-config-6
        "H-7" 'eyebrowse-switch-to-window-config-7
        "H-8" 'eyebrowse-switch-to-window-config-8
        "H-9" 'eyebrowse-switch-to-window-config-9
        "H-`" 'eyebrowse-rename-window-config
        "H-q" 'eyebrowse-close-window-config))
   #+end_src
* 字体及输入法（中文）
  #+begin_src emacs-lisp
	(setq private/rime-directory (concat private/config-directory "rime/"))
	(setq private/offical-rime-directory "/Library/Input Methods/Squirrel.app/Contents/SharedSupport")

	(use-package cnfonts
	  :defer t
	  :init
	  (add-hook 'after-init-hook #'cnfonts-enable)
	  (setq cnfonts-use-face-font-rescale t))

	(use-package rime
	  :defer t
	  :custom
	  (default-input-method "rime")
	  :init
	  (setq rime-librime-root (concat private/rime-directory "dist/")
		rime-show-candidate 'posframe
		rime-posframe-style 'vertical
		rime-show-preedit 'inline
		rime-disable-predicates '(rime-predicate-hydra-p
					  ;;rime-predicate-evil-mode-p
					  rime-predicate-prog-in-code-p
					  rime-predicate-punctuation-after-ascii-p
					  meow-normal-mode-p))
	  :config
	  (global-set-key (kbd "M-s-SPC") 'rime-inline-ascii))
  #+end_src
* Org Mode
* Ivy
  #+begin_src emacs-lisp
	(use-package ivy
	  :defer t
	  :init
	  (add-hook 'after-init-hook #'ivy-mode)
	  (setq ivy-use-virtual-buffers t
		enable-recursive-minibuffers t))

    (use-package swiper
      :defer t
      :commands (swiper)
      :config
      (general-define-key
       "C-s" 'swiper))

      (use-package counsel
	:hook (ivy-mode . counsel-mode))
  #+end_src
* Restart Emacs
    #+begin_src emacs-lisp
      (use-package restart-emacs
	:defer t
	:commands (restart-emacs))
  #+end_src
* 按键提示
  keypad 模式由 meow 自己提供按键提示，其他提示由 which-key 提供。
    #+begin_src emacs-lisp
      (use-package which-key
	:defer t
	:init
	(add-hook 'after-init-hook #'which-key-mode))
  #+end_src
