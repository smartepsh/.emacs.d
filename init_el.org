:PROPERTIES:
:ID:       52F81E86-D8C4-4A74-B8C4-EE0A32CA7100
:header-args: :tangle "~/.emacs.d/init.el"
:END:
#+title: init.el

* 背景
  =spacemacs= 入坑，经过大约三四年的使用，终于可以算是摸到了门槛。之前一直使用 =evil= 来模拟 vim 模式，随着使用的时间越长，依赖的插件越多，evil 带来的弊端也逐渐显现出来：
  - 每一个插件除非有支持，不然都需要自定义按键，配合双 leader 系统，任务繁重。。。
  - 对于不同的 mode-map 可能有相同的按键映射，emasc 采用 =1 major + n minor= 模式，很容易产生按键冲突
  - 过重

  让我萌生了更换输入模式的想法。此时恰巧看到了[[https://emacs-china.org/t/meow/15679][猫态编辑：Meow - Emacs-general - Emacs China]] 这个模式，被描述吸引，决定尝试。

  同时经过几年的使用，逐渐对原有在 =懵懂= 状态下进行的配置有了重构之心，故借此机会，同时使用 org-mode ，尽可能记录下配置生成的点点滴滴。

** 使用 org mode 记录配置
   很多人使用 emacs 都是因为 org mode 入的坑，可见其厉害之处。本篇记录使用 =org-tangle= 将包含的 source block 依序拼接(=tangle=)为一个文件。这里默认会导出为 org 文件的同名文件，需要设置。

   #+begin_src emacs-lisp :tangle no
     :PROPERTIES:
     :header-args: :tangle "~/.emacs.d/init.el"
     :END:
   #+end_src

   此处我们直接输出配置到 =~/.emacs.d/init.el= 文件，意味着需要手动更新输出，新配置才可能生效。当然也可以直接更改此文件，但在下次导出时，会被覆盖，所以请不要这么做。

* 基础设置

** 窗口最大化
   #+begin_src emacs-lisp
     (global-set-key (kbd "<C-s-268632070>") 'toggle-frame-fullscreen)
     (global-set-key (kbd "s-C-f") 'toggle-frame-fullscreen)
     (global-set-key (kbd "s-M-f") 'toggle-frame-maximized)
   #+end_src

** 设置方法快速进入此文件
   #+begin_src emacs-lisp
     (defun goto-configuration-org ()
       (interactive)
       (find-file "~/.emacs.d/init_el.org"))
   #+end_src
** 加速启动时间的技巧
   通过设置最大垃圾回收大小，在启动过程中避免垃圾回收；在启动之后，设置为 300mb 以减少垃圾回收启动频率。
   #+begin_src emacs-lisp
     (setq gc-cons-threshold most-positive-fixnum)
     (add-hook 'after-init-hook '(lambda () (setq gc-cons-threshold 5121024)))
   #+end_src
** 增加从进程读取消息的大小
   因为 lsp-mode 需要更改此大小。
   #+begin_src emacs-lisp
     (setq read-process-output-max (* 3 (* 1024 1024))) ;; 3mb
   #+end_src
** 计算启动时间
 #+begin_src emacs-lisp
   (setq emacs-start-time (current-time))
   (add-hook 'window-setup-hook '(lambda ()
                                   (message
                                    (format "Emacs startup in %.3f seconds"
                                            (float-time
                                             (time-subtract
                                              (current-time)
                                              emacs-start-time))))))
 #+end_src
** 编译设置
 #+begin_src emacs-lisp
   (setq comp-async-jobs-number 5
         comp-deferred-compilation t
         native-comp-async-report-warnings-errors nil)
 #+end_src
** 系统及文件夹路径设置
 #+begin_src emacs-lisp
   (setq private/cache-directory "~/.emacs.d/.cache/"
	 private/system-is-mac (eq system-type 'darwin)
	 private/config-directory "~/.emacs.d/"
)
   (add-to-list 'load-path (concat private/config-directory "helpers/"))
 #+end_src
** 自定义文件及载入设置
 #+begin_src emacs-lisp
   (setq custom-file "~/.emacs.d/custom.el")
   (if (file-exists-p custom-file)
       (load custom-file)
     (message "no custom setting file!"))
 #+end_src
** 当光标滚动超出屏幕的时候，不再使目标行居中
  #+begin_src emacs-lisp
    (setq scroll-conservatively 101
          scroll-preserve-screen-position t)
  #+end_src
** 不再有提示音
  #+begin_src emacs-lisp
    (setq ring-bell-function 'ignore)
  #+end_src
** 替换 yes no
   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src
** 编辑相关设置
   #+begin_src emacs-lisp
     (set-default-coding-systems 'utf-8-unix)
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
     (setq tab-width 2
           indent-tabs-mode nil
           auto-save-default nil
           make-backup-files nil
           create-lockfiles nil
           x-select-enable-clipboard nil)
   #+end_src
** 翻墙（虽然一般不怎么用）
   #+begin_src emacs-lisp
     (defun goproxy()
       (interactive)
       (setq url-proxy-services '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
                                  ("http" . "192.168.50.111:8118")
                                  ("https" . "192.168.50.111:8118"))))

     (defun disproxy()
       (interactive)
       (setq url-proxy-services nil))
   #+end_src
** mac 修饰键配置
   #+begin_src emacs-lisp
     (setq ns-command-modifier 'super
           ns-option-modifer 'meta
           ns-right-option-modifier 'hyper
           ns-right-command-modifier 'hyper)
   #+end_src
* 包管理
  我们使用 [[https://github.com/jwiegley/use-package][jwiegley/use-package]] 进行 melpa 包管理，同时配合 [[https://github.com/quelpa/quelpa][quelpa/quelpa]] 进行源码包管理（含 github），并使用 [[https://github.com/Silex/package-utils][Silex/package-utils]] 提供 helper 方便使用。

#+begin_src emacs-lisp
  (setq package-native-compile t
	use-package-expand-minimally t
	use-package-always-ensure t
	package-enable-at-startup nil
	package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("nongnu"   . "https://elpa.nongnu.org/nongnu/")
			   ("gnu"   . "https://elpa.gnu.org/packages/")))
  ;; This is only needed once, near the top of the file
  (eval-when-compile
    (require 'use-package))

  (use-package use-package-ensure-system-package
    :ensure t)

  ;; disable update during quelpa initialized
  (setq quelpa-update-melpa-p nil
	quelpa-checkout-melpa-p t)

  ;; install quelpa
  (unless (package-installed-p 'quelpa)
    (with-temp-buffer
      (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
      (eval-buffer)
      (quelpa-self-upgrade)))

  ;; install quelpa-use-package
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))

  (require 'quelpa-use-package)
  (quelpa-use-package-activate-advice)

  ;;(use-package benchmark-init
  ;;  :config
  ;;  (add-hook 'after-init-hook 'benchmark-init/deactivate))

  (use-package package-utils
    :defer t)
#+end_src
* 环境变量
  #+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize))
  #+end_src
* 输入方案
  #+begin_src emacs-lisp
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)

      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev))
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION sitch-tate.
       '("j" . meow-motion-origin-command)
       '("k" . meow-motion-origin-command)
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("C" . meow-change-save)
       '("d" . meow-C-d)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("F" . meow-find-expand)
       '("<escape>" . meow-cancel)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("N" . meow-pop-search)
       '("o" . meow-block)
       '("O" . meow-block-expand)
       '("p" . meow-yank)
       '("P" . meow-yank-pop)
       '("q" . meow-quit)
       '(":" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("T" . meow-till-expand)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("V" . meow-kmacro-matches)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-kmacro-lines)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("Z" . meow-pop-all-selection)
       '("&" . meow-query-replace)
       '("%" . meow-query-replace-regexp)
       '("'" . repeat)
       '("\\" . quoted-insert)
       '("g" . meow-last-buffer)
       ;; customize
       '(">" . scroll-up)
       '("<" . scroll-down)
       '("C-r" . undo-redo)
       '("S" . meow-replace-save)))

    (use-package meow
      :demand t
      :init
      (setq meow-use-cursor-position-hack t
	    meow-use-enhanced-selection-effect t)
      (meow-global-mode t)
      :config
      (meow-setup)
      (add-to-list 'meow-mode-state-list '(sly-mrepl-mode . normal))
      (setq meow-expand-exclude-mode-list '()
	    meow-selection-command-fallback
	    '((meow-replace . meow-replace-char)
	      (meow-change . meow-change-char)
	      (meow-save . meow-save-char)
	      (meow-kill . meow-C-k)
	      (meow-delete . meow-C-d)
	      (meow-cancel-selection . meow-keyboard-quit)
	      (meow-pop-selection . meow-pop-grab))))
  #+end_src
* 按键管理
** 绑定
  meow 提供了一些全局的绑定方法，但基本均基于 normal state 或者 leader key ，无法根据 keymap 设置按键，故引入 general 。
  #+begin_src emacs-lisp
    (use-package general
      :config
      (general-auto-unbind-keys))
  #+end_src
** 提示
  keypad 模式由 meow 自己提供按键提示，其他提示由 which-key 提供。
  #+begin_src emacs-lisp
    (use-package which-key
      :defer t
      :init
      (add-hook 'after-init-hook 'which-key-mode))
  #+end_src
** 按键及方法显示
   [[https://github.com/lewang/command-log-mode][lewang/command-log-mode: log commands to buffer]]
   #+begin_src emacs-lisp
     (use-package command-log-mode
       :defer t
       :commands (command-log-mode))
   #+end_src

* 外观
** modeline
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :init
       (add-hook 'after-init-hook (lambda ()
				    (doom-modeline-mode)
				    (column-number-mode)
				    (doom-modeline-def-modeline 'my-line
				      '(bar workspace-name modals buffer-info buffer-position)
				      '(input-method checker major-mode parrot lsp))
				    (defun setup-custom-doom-modeline ()
				      (interactive)
				      (doom-modeline-set-modeline 'my-line 'default))
				    (setup-custom-doom-modeline)))
       :config
       (setq doom-modeline-buffer-modification-icon nil
	     doom-modeline-buffer-state-icon nil
	     doom-modeline-buffer-file-name-style 'file-name))

   #+end_src
** theme
   #+begin_src emacs-lisp
     (use-package doom-themes
       :init
       (setq doom-themes-enable-bold t
	     doom-themes-enable-italic t)
       (load-theme 'doom-one t))
   #+end_src

** 关闭滚动条和工具条
   #+begin_src emacs-lisp
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
   #+end_src

** 小猫咪 nyan-mode
#+begin_src emacs-lisp
  (use-package nyan-mode
    :init
    (add-hook 'after-init-hook 'nyan-mode))
#+end_src
** 彩色括号及高亮TODO
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))

     (use-package hl-todo
       :hook (prog-mode . hl-todo-mode))
   #+end_src
** posframe
   #+begin_src emacs-lisp
     (use-package posframe
       :defer t)
   #+end_src
** 不显示欢迎界面
   #+begin_src emacs-lisp
     (setq inhibit-startup-screen t)
   #+end_src
* 窗口管理
  因为 centaur tabs 有点问题，所以先禁止掉。
  快捷键设置向 item 靠拢。
   #+begin_src emacs-lisp :tangle no
     (use-package centaur-tabs
       :defer t
       :config
       (general-define-key
        "s-1" 'centaur-tabs-select-visible-tab
        "s-2" 'centaur-tabs-select-visible-tab
        "s-3" 'centaur-tabs-select-visible-tab
        "s-4" 'centaur-tabs-select-visible-tab
        "s-5" 'centaur-tabs-select-visible-tab
        "s-6" 'centaur-tabs-select-visible-tab
        "s-7" 'centaur-tabs-select-visible-tab
        "s-t" 'centaur-tabs--create-new-tab)
       (centaur-tabs-mode t)
       (setq centaur-tabs-height 20
             centaur-tabs-set-bar 'left
             centaur-tabs-close-button "x"
             centaur-tabs-set-close-button nil
             ;;centaur-tabs--buffer-show-groups t
             centaur-tabs-set-modified-marker t
             ;;centaur-tabs-label-fixed-length 10
             centaur-tabs-set-icons t))
   #+end_src

   #+begin_src emacs-lisp
     (use-package eyebrowse
       :defer t
       :init
       (add-hook 'after-init-hook 'eyebrowse-mode)
       (setq eyebrowse-keymap-prefix "")
       :config
       (general-define-key
	"H-1" 'eyebrowse-switch-to-window-config-1
	"H-2" 'eyebrowse-switch-to-window-config-2
	"H-3" 'eyebrowse-switch-to-window-config-3
	"H-4" 'eyebrowse-switch-to-window-config-4
	"H-5" 'eyebrowse-switch-to-window-config-5
	"H-6" 'eyebrowse-switch-to-window-config-6
	"H-7" 'eyebrowse-switch-to-window-config-7
	"H-8" 'eyebrowse-switch-to-window-config-8
	"H-9" 'eyebrowse-switch-to-window-config-9
	"H-`" 'eyebrowse-rename-window-config
	"H-q" 'eyebrowse-close-window-config
	"s-t" 'eyebrowse-create-window-config))

     (use-package switch-window
       :init
       (setq switch-window-auto-resize-window t
	     switch-window-minibuffer-shortcut ?z)
       (general-define-key
	"s-d" 'switch-window-then-split-right
	"s-[" 'windmove-left
	"s-]" 'windmove-right
	"s-w" 'delete-window
	"H-t" 'switch-window))
   #+end_src
* 自动 revert
  #+begin_src emacs-lisp
    (use-package autorevert
      :defer t
      :ensure nil
      :hook (after-init . global-auto-revert-mode))
  #+end_src
* 字体及输入法（中文）

#+begin_src c :tangle "~/.emacs.d/helpers/emacs-module.h"

  /* emacs-module.h - GNU Emacs module API.

     Copyright (C) 2015-2016 Free Software Foundation, Inc.

     This file is part of GNU Emacs.

     GNU Emacs is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     GNU Emacs is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.  */

  #ifndef EMACS_MODULE_H
  #define EMACS_MODULE_H

  #include <stdint.h>
  #include <stddef.h>
  #include <stdbool.h>

  #if defined __cplusplus && __cplusplus >= 201103L
  # define EMACS_NOEXCEPT noexcept
  #else
  # define EMACS_NOEXCEPT
  #endif

  #ifdef __cplusplus
  extern "C" {
  #endif

    /* Current environment.  */
    typedef struct emacs_env_25 emacs_env;

    /* Opaque pointer representing an Emacs Lisp value.
       BEWARE: Do not assume NULL is a valid value!  */
    typedef struct emacs_value_tag *emacs_value;

    enum emacs_arity { emacs_variadic_function = -2 };

    /* Struct passed to a module init function (emacs_module_init).  */
    struct emacs_runtime
    {
      /* Structure size (for version checking).  */
      ptrdiff_t size;

      /* Private data; users should not touch this.  */
      struct emacs_runtime_private *private_members;

      /* Return an environment pointer.  */
      emacs_env *(*get_environment) (struct emacs_runtime *ert);
    };


    /* Function prototype for the module init function.  */
    typedef int (*emacs_init_function) (struct emacs_runtime *ert);

    /* Function prototype for the module Lisp functions.  */
    typedef emacs_value (*emacs_subr) (emacs_env *env, ptrdiff_t nargs,
				       emacs_value args[], void *data);

    /* Possible Emacs function call outcomes.  */
    enum emacs_funcall_exit
      {
	/* Function has returned normally.  */
	emacs_funcall_exit_return = 0,

	/* Function has signaled an error using `signal'.  */
	emacs_funcall_exit_signal = 1,

	/* Function has exit using `throw'.  */
	emacs_funcall_exit_throw = 2,
      };

    struct emacs_env_25
    {
      /* Structure size (for version checking).  */
      ptrdiff_t size;

      /* Private data; users should not touch this.  */
      struct emacs_env_private *private_members;

      /* Memory management.  */

      emacs_value (*make_global_ref) (emacs_env *env,
				      emacs_value any_reference);

      void (*free_global_ref) (emacs_env *env,
			       emacs_value global_reference);

      /* Non-local exit handling.  */

      enum emacs_funcall_exit (*non_local_exit_check) (emacs_env *env);

      void (*non_local_exit_clear) (emacs_env *env);

      enum emacs_funcall_exit (*non_local_exit_get)
      (emacs_env *env,
       emacs_value *non_local_exit_symbol_out,
       emacs_value *non_local_exit_data_out);

      void (*non_local_exit_signal) (emacs_env *env,
				     emacs_value non_local_exit_symbol,
				     emacs_value non_local_exit_data);

      void (*non_local_exit_throw) (emacs_env *env,
				    emacs_value tag,
				    emacs_value value);

      /* Function registration.  */

      emacs_value (*make_function) (emacs_env *env,
				    ptrdiff_t min_arity,
				    ptrdiff_t max_arity,
				    emacs_value (*function) (emacs_env *env,
							     ptrdiff_t nargs,
							     emacs_value args[],
							     void *)
				    EMACS_NOEXCEPT,
				    const char *documentation,
				    void *data);

      emacs_value (*funcall) (emacs_env *env,
			      emacs_value function,
			      ptrdiff_t nargs,
			      emacs_value args[]);

      emacs_value (*intern) (emacs_env *env,
			     const char *symbol_name);

      /* Type conversion.  */

      emacs_value (*type_of) (emacs_env *env,
			      emacs_value value);

      bool (*is_not_nil) (emacs_env *env, emacs_value value);

      bool (*eq) (emacs_env *env, emacs_value a, emacs_value b);

      intmax_t (*extract_integer) (emacs_env *env, emacs_value value);

      emacs_value (*make_integer) (emacs_env *env, intmax_t value);

      double (*extract_float) (emacs_env *env, emacs_value value);

      emacs_value (*make_float) (emacs_env *env, double value);

      /* Copy the content of the Lisp string VALUE to BUFFER as an utf8
	 null-terminated string.

	 SIZE must point to the total size of the buffer.  If BUFFER is
	 NULL or if SIZE is not big enough, write the required buffer size
	 to SIZE and return false.

	 Note that SIZE must include the last null byte (e.g. "abc" needs
	 a buffer of size 4).

	 Return true if the string was successfully copied.  */

      bool (*copy_string_contents) (emacs_env *env,
				    emacs_value value,
				    char *buffer,
				    ptrdiff_t *size_inout);

      /* Create a Lisp string from a utf8 encoded string.  */
      emacs_value (*make_string) (emacs_env *env,
				  const char *contents, ptrdiff_t length);

      /* Embedded pointer type.  */
      emacs_value (*make_user_ptr) (emacs_env *env,
				    void (*fin) (void *) EMACS_NOEXCEPT,
				    void *ptr);

      void *(*get_user_ptr) (emacs_env *env, emacs_value uptr);
      void (*set_user_ptr) (emacs_env *env, emacs_value uptr, void *ptr);

      void (*(*get_user_finalizer) (emacs_env *env, emacs_value uptr))
      (void *) EMACS_NOEXCEPT;
      void (*set_user_finalizer) (emacs_env *env,
				  emacs_value uptr,
				  void (*fin) (void *) EMACS_NOEXCEPT);

      /* Vector functions.  */
      emacs_value (*vec_get) (emacs_env *env, emacs_value vec, ptrdiff_t i);

      void (*vec_set) (emacs_env *env, emacs_value vec, ptrdiff_t i,
		       emacs_value val);

      ptrdiff_t (*vec_size) (emacs_env *env, emacs_value vec);
    };

    /* Every module should define a function as follows.  */
    extern int emacs_module_init (struct emacs_runtime *ert);

  #ifdef __cplusplus
  }
  #endif

  #endif /* EMACS_MODULE_H */
#+end_src
#+begin_src emacs-lisp
  (setq private/rime-directory (concat private/config-directory "rime/")
	rime-emacs-module-header-root (concat private/config-directory "helpers/"))

  (use-package cnfonts
    :defer t
    :init
    (add-hook 'after-init-hook 'cnfonts-enable)
    (setq cnfonts-use-face-font-rescale t)
    :config
    (general-define-key
     "s-=" 'cnfonts-increase-fontsize
     "s--" 'cnfonts-decrease-fontsize))

  (use-package rime
    :defer t
    :custom
    (default-input-method "rime")
    :init
    (setq rime-librime-root (concat private/rime-directory "dist/")
	  rime-show-candidate 'posframe
	  rime-posframe-style 'vertical
	  rime-show-preedit 'inline
	  rime-disable-predicates '(rime-predicate-hydra-p
				    rime-predicate-prog-in-code-p
				    rime-predicate-punctuation-after-ascii-p
				    meow-normal-mode-p))
    (global-set-key (kbd "s-SPC") 'toggle-input-method)
    (general-define-key
     :keymaps 'rime-active-mode-map
     "M-j" 'rime-inline-ascii))
#+end_src
* Org Mode
  算是重头戏了。。。我也是菜鸟，之前使用 evil 自定义按键，其实有些功能是很少用的。这次换为 =meow= 之后，使用原生快捷键看看效果。
** org 根路径
   真实路径在 icloud 中。
  #+begin_src emacs-lisp
	    (setq base-directory  (file-truename "~/KentonBase/")
		  private/book-directory (concat base-directory "publications/")
		  org-directory (concat base-directory "orgs/"))
  #+end_src
** Org-capture
   #+begin_src emacs-lisp
     (use-package org-capture
       :after org
       :ensure org-plus-contrib)

     (use-package org-mac-link
       :defer t
       :ensure org-plus-contrib
       :commands (org-mac-skim-insert-page
		  org-mac-safari-insert-frontmost-url
		  org-mac-finder-insert-selected))
   #+end_src
** Ebook Reader
   org-mode 用来干嘛呢？对吧？
*** epub
    #+begin_src emacs-lisp
      (use-package nov
	:defer t
	:mode ("\\.epub\\'" . nov-mode)
	:init
	(setq nov-save-place-file (concat org-directory "nov-places")))
    #+end_src
*** pdf(skim)
    #+begin_src emacs-lisp :tangle "~/.emacs.d/helpers/skim.el"
      ;;; Public Domain by Stian Haklev 2014
      ;;; heavily under construction, mostly built for my own use, but
      ;;; feel free to improve and make more general
      ;;; I keep all my academic PDFs in the same directory, and want special
      ;;; handling for them - eventually I'll check if the PDF is in that dir
      ;;; and if not, I'll insert the whole path in the org-link etc.

      ;;; based on https://github.com/houshuang/skim-emacs/blob/master/skim.el

      (require 'org-mac-link)

      (defun skim-page (&optional offset)
	(interactive)
	(when (not offset) (setq offset 1))
	(do-applescript (format "
      tell document 1 of application \"Skim\" to set a to index of current page
      tell document 1 of application \"Skim\" to go to page (a + %d)
      a" offset)))

      (defun skim-page-absolute (offset)
	(interactive)
	(do-applescript (format "
      tell document 1 of application \"Skim\" to set a to index of current page
      tell document 1 of application \"Skim\" to go to page %d
      a" offset)))

      (defun skim-goto (page)
	(interactive "nPDF Page: ")
	(skim-page-absolute page))
      ;; (defun skim-get-highlights ()
      ;;   (interactive)
      ;;   (insert (do-applescript "
      ;; tell application \"Skim\"
      ;; 	set pageNotes to notes of page 3 of document 1
      ;; 	set out to \"\"
      ;; 	repeat with i in pageNotes
      ;; 		set txt to get text of i
      ;; 		set out to out & txt & \"\n\n\"
      ;; 	end repeat
      ;; end tell
      ;; out")))

      (defun skim-current-page ()
	(interactive)
	(skim-page 0))

      (defun skim-current-file ()
	(interactive)
	(do-applescript "tell document 1 of application \"Skim\" to set a to name
      a"))

      (defun skim-next-page ()
	(interactive)
	(skim-page 1))

      (defun skim-prev-page ()
	(interactive)
	(skim-page -1))

      (defun skim-kill-other-windows ()
	(interactive)
	(do-applescript "
      tell application \"Skim\"
	      set mainID to id of front window
	      -- insert your code
	      close (every window whose id ≠ mainID)
      end tell"))

      (defun open-link-in-skim ()
	(interactive)
	(let ((link (org-element-context)))
	  (if (string-equal (org-element-property :type link) "skim")
	      (progn
		(org-mac-skim-open (org-element-property :path link))
		(skim-kill-other-windows)
		(sleep-for 0 100)
		(do-applescript "tell application \"Emacs\" to activate"))
	    (message "It's not a skim link !!!"))))


      (defun skim-insert-book-link ()
	(interactive)
	(insert (skim-book-link)))

      (defun skim-insert-page-link ()
	(interactive)
	(insert (skim-page-link-without-book-name)))

      (defun skim-book-link ()
	"get book link into org with page 1 and description don't contain page number"
	(let* ((link-and-descr (as-get-skim-page-link))
	       (split-link (split-string link-and-descr "::split::"))
	       (link (car split-link))
	       (description (cadr split-link))
	       (book-link (concat (link-to-book link) "::1"))
	       (book-name (book-name description))
	       (org-link))
	  (when (not (string= link ""))
	    (setq org-link (org-link-make-string book-link book-name)))
	  (kill-new org-link)
	  org-link))

      (defun skim-page-link-without-book-name ()
	"only get page link with page number as description (without book name)"
	(let* ((link-and-descr (as-get-skim-page-link))
	       (split-link (split-string link-and-descr "::split::"))
	       (link (car split-link))
	       (description (cadr split-link))
	       (page-number (concat "p." (page-number description)))
	       (org-link))
	  (when (not (string= link ""))
	    (setq org-link (org-link-make-string link page-number)))
	  (kill-new org-link)
	  org-link))

      (defun link-to-book (link)
	(s-join "" (reverse (cdr (reverse (split-string link "::"))))))

      (defun page-number (description)
	(car (reverse (split-string description ", p\\."))))

      (defun book-name (description)
	(s-join "" (reverse (cdr (reverse (split-string description ", p\\."))))))

      (provide 'skim)
    #+end_src
*** DONE 设置翻页快捷键
    - State "DONE"       from "TODO"       [2021-11-14 Sun 21:55]
    检测当前是否有 nov buffer ，如果有，则执行 nov 翻页，否则执行 skim 翻页。
    #+begin_src emacs-lisp
      (require 'skim)

      (defun nov-buffer-in-current ()
	(cl-find-if
	 (lambda (window)
	   (with-current-buffer (window-buffer window) (eq major-mode 'nov-mode)))
	 (window-list)))

      (defun reader/scroll-up (arg)
	(interactive "P")
	(let ((nov-window (nov-buffer-in-current))
	      (current-window (get-buffer-window)))
	  (if nov-window
	      (progn
		(select-window nov-window)
		(nov-scroll-up arg)
		(select-window current-window))
	    (skim-next-page))))

      (defun reader/scroll-down (arg)
	(interactive "P")
	(let ((nov-window (nov-buffer-in-current))
	      (current-window (get-buffer-window)))
	  (if nov-window
	      (progn
		(select-window nov-window)
		(nov-scroll-down arg)
		(select-window current-window))
	    (skim-prev-page))))

      (defun reader/goto-pdf-first-page-or-nov-toc ()
	(interactive)
	(let ((nov-window (nov-buffer-in-current))
	      (current-window (get-buffer-window)))
	  (if nov-window
	      (progn
		(select-window nov-window)
		(nov-goto-toc)
		(select-window current-window))
	    (skim-goto 1))))

    #+end_src
** Helpers
*** tab 循环展开图片
    #+begin_src emacs-lisp
      ;;; Only display inline images under current subtree.
      (defun org-display-subtree-inline-images (&optional state)
	"Toggle the display of inline images under current subtree.
      INCLUDE-LINKED is passed to `org-display-inline-images'."
	(interactive)
	(save-excursion
	  (save-restriction
	    (org-narrow-to-subtree)
	    (let* ((beg (point-min))
		   (end (point-max))
		   (image-overlays (cl-intersection
				    org-inline-image-overlays
				    (overlays-in beg end)))
		   (display-inline-images-local
		    (lambda ()
		      (org-display-inline-images t t beg end)
		      (setq image-overlays (cl-intersection
					    org-inline-image-overlays
					    (overlays-in beg end)))
		      (if (and (org-called-interactively-p) image-overlays)
			  (message "%d images displayed inline"
				   (length image-overlays)))))
		   (hide-inline-images-local
		    (lambda ()
		      (org-remove-inline-images)
		      (message "Inline image display turned off"))))
	      (if state
		  (pcase state
		    ('subtree
		     (funcall display-inline-images-local))
		    ('folded
		     (funcall hide-inline-images-local)))
		(if image-overlays
		    (funcall display-inline-images-local)
		  (funcall hide-inline-images-local)))))))
    #+end_src

*** 循环展开 properties
    #+begin_src emacs-lisp
      (defun org-hide-properties ()
	"Hide all org-mode headline property drawers in buffer. Could be slow if it has a lot of overlays."
	(interactive)
	(save-excursion
	  (goto-char (point-min))
	  (while (re-search-forward
		  "^ *:properties:\n\\( *:.+?:.*\n\\)+ *:end:\n" nil t)
	    (let ((ov_this (make-overlay (match-beginning 0) (match-end 0))))
	      (overlay-put ov_this 'display "")
	      (overlay-put ov_this 'hidden-prop-drawer t))))
	(put 'org-toggle-properties-hide-state 'state 'hidden))

      (defun org-show-properties ()
	"Show all org-mode property drawers hidden by org-hide-properties."
	(interactive)
	(remove-overlays (point-min) (point-max) 'hidden-prop-drawer t)
	(put 'org-toggle-properties-hide-state 'state 'shown))

      (defun org-toggle-properties ()
	"Toggle visibility of property drawers."
	(interactive)
	(if (eq (get 'org-toggle-properties-hide-state 'state) 'hidden)
	    (org-show-properties)
	  (org-hide-properties)))
    #+end_src

*** mac 通知
依赖于终端软件 =terminal-notifier= 。
#+begin_src emacs-lisp
  (defun notify-osx (title message)
  (call-process "terminal-notifier"
                nil 0 nil
                "-group" "Emacs"
                "-title" title
                "-sender" "org.gnu.Emacs"
                "-mesage" message
                "-activate" "org.gnu.Emacs"))
#+end_src
** Org-babel
*** elixir
    #+begin_src emacs-lisp
      (use-package ob-elixir :after org)
    #+end_src
** 本体
   #+begin_src emacs-lisp
	  (use-package org
	    :ensure org-plus-contrib
	    :ensure-system-package terminal-notifier
	    :pin nongnu
	    :defer t
	    :init
	    (org-babel-do-load-languages
	     'org-babel-load-languages
	     '((emacs-lisp . t)
	       (elixir . t)
	       (org . t)
	       (haskell . t)
	       (lisp . t)))
	    ;;(R . t)))
	    :config
	  ;;; auto display inline images on Org TAB cycle expand headlines.
	    ;; (add-hook 'org-mode-hook 'scimax-src-keymap-mode)
	    (add-hook 'org-cycle-hook #'org-display-subtree-inline-images)
	    (add-to-list 'org-export-backends 'md)
	    (setq org-todo-keywords '((sequence "TODO(t/!)" "WAIT(w/!)" "|" "DONE(d/!)" "DELEGATED(g@)" "CANCELED(c@)"))
		  ;; org-default-notes-file org-agenda-file
		  org-archive-location (concat org-directory "Archived/" "%s_archive::")
		  org-id-locations-file (concat org-directory ".org-id-locations")
		  org-log-done nil
		  ;; (nconc org-modules '(org-id))
		  ;; org-refile-targets '((org-agenda-files :maxlevel . 2))
		  org-refile-use-outline-path 'file
		  org-outline-path-complete-in-steps nil
		  org-refile-allow-creating-parent-nodes 'confirm
		  org-refile-use-cache t
		  org-startup-truncated nil
		  org-confirm-babel-evaluate nil
		  org-M-RET-may-split-line '((headline . nil) (item . nil) (default . t))
		  org-html-validation-link nil)
	    ;; refresh cache when emacs idle 5 mins
	    (run-with-idle-timer 300 t (lambda ()
					 (org-refile-cache-clear)
					 ;; (org-refile-get-targets)
					 (org-roam-db-sync))))
   #+end_src
** 美观
   有时候反而觉得原始状态挺好看。。。而且这个插件极度影响性能。。。所以先禁止掉。
   #+begin_src emacs-lisp :tangle no
     (use-package org-bullets
       :hook (org-mode . org-bullets-mode))
   #+end_src
** TODO Org-ref
     查阅相关资料后，对于我这种没有知识整理，文档输出的人废物来说，无用。。。
     又发现想作到笔记的精确对应（按之前方案只能对应到页），几个成熟方案还是需要他。。。
     这里有个问题，是默认从 calibredb 生成的 bibtex 文件的 key 包含有中括号，会影响 org-ref 的解析，所以需要注意更改导出的 key 格式。

     #+begin_src emacs-lisp
       (setq publication-bib (concat base-directory "publication_catelog.bib")
	     collections-bib (concat base-directory "collections.bib"))

       (use-package ivy-bibtex
	 :defer t
	 :init
	 (setq bibtex-completion-bibliography `(,publication-bib)
	       bibtex-completion-pdf-field "file"
	       bibtex-completion-notes-path org-directory
	       bibtex-completion-library-path (concat base-directory "collections/")
	       bibtex-completion-display-formats '((article . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${title:*} ${journal:40}")
						   (inbook . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${title:*} Chapter ${chapter:32}")
						   (incollection . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${title:*} ${booktitle:40}")
						   (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${title:*} ${booktitle:40}")
						   (t . "${=has-pdf=:1}${=has-note=:1} ${=type=:4} ${title:*}"))
	       bibtex-completion-pdf-extension '(".pdf" ".djvu")))
       (use-package org-ref
	 :after org
	 :init
	 (setq reftex-default-bibliography `(,publication-bib ,collections-bib)
	       ;;org-ref-bibliography-notes (concat org-directory "ref-notes.org")
	       org-ref-default-bibliography `(,publication-bib ,collections-bib)
	       ;;org-ref-pdf-directory private/book-directory
	       calibredb-ref-default-bibliography publication-bib
	       org-ref-get-pdf-filename-function 'org-ref-get-mendeley-filename)
	 (require 'bibtex)

	 (setq bibtex-autokey-year-length 4
	       bibtex-autokey-name-year-separator "-"
	       bibtex-autokey-year-title-separator "-"
	       bibtex-autokey-titleword-separator "-"
	       bibtex-autokey-titlewords 2
	       bibtex-autokey-titlewords-stretch 1
	       bibtex-autokey-titleword-length 5
	       org-ref-bibtex-hydra-key-binding (kbd "H-b"))

	 (require 'org-ref-ivy)

	 (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
	       org-ref-insert-cite-function 'org-ref-cite-insert-ivy
	       org-ref-insert-label-function 'org-ref-insert-label-link
	       org-ref-insert-ref-function 'org-ref-insert-ref-link
	       org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body))))
       ;; org-ref-completion-library 'org-ref-ivy-cite-completion))

     #+end_src
** Agenda
   #+begin_src emacs-lisp
     (defun org-refresh-agenda-files ()
       (interactive)
       (setq org-agenda-files (directory-files (concat org-directory "journal/") t ".org")))
     (use-package org-agenda
       :ensure org-plus-contrib
       :commands (org-agenda-list
		  org-agenda
		  org-agenda-to-appt)
       :init
       (org-refresh-agenda-files))
   #+end_src
** Bookmark
   使用 org 文件做了一个收藏夹。
   #+begin_src emacs-lisp
     (setq private/bookmark-file (concat org-directory "bookmarks.org"))
     (defun open-bookmarks ()
       (interactive)
       (if (buffer-live-p "bookmarks.org")
	   (pop-to-buffer "bookmarks.org")
	 (find-file private/bookmark-file)))
   #+end_src
** Org-roam
   #+begin_src emacs-lisp
     (use-package org-roam
       :init
       (add-hook 'after-init-hook 'org-roam-setup)
       (setq org-roam-v2-ack t
	     org-roam-directory org-directory
	     org-roam-db-gc-threshold most-positive-fixnum
	     org-roam-db-location (concat org-directory "org-roam.db")
	     org-roam-dailies-directory "journal/")

       (require 'org-roam-protocol)
       :config
       (setq org-roam-node-display-template "${hierarchy:*}
     ${tags:20}")
       (setq org-roam-completion-everywhere t)
       (setq org-roam-completion-system 'ivy)
       (setq org-roam-capture-ref-templates
	     '(("b" "Bookmark" plain "%?\n*** ${title}\n:PROPERTIES:\n:ID: %(org-id-new)\n:ROAM_REFS: ${ref}\n:ROAM_EXCLUDE: t\n:END:" :if-new (file+olp "%(symbol-value 'bookmark-file)" ("Uncategorized")) :immediate-finish t :unnarrowed t :empty-lines-after 1))) ;;
       (setq org-roam-dailies-capture-templates
	     '(("d" "dailies" entry "* %<%R> %?" :target (file+head "%<%Y%m%d-%W>.org" "#+title: %<%Y-%m-%d>\n"))))
       ;; must after use-package org-roam
       (cl-defmethod org-roam-node-filetitle ((node org-roam-node))
	 "Return the file TITLE for the node."
	 (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
       (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
	 "Return the hierarchy for the node."
	 (let ((title (org-roam-node-title node))
	       (olp (org-roam-node-olp node))
	       (level (org-roam-node-level node))
	       (filetitle (org-roam-node-filetitle node)))
	   (concat
	    (if (> level 0) (concat filetitle " > "))
	    (if (> level 1) (concat (string-join olp " > ") " > "))
	    title))
	 ))

     (use-package org-roam-bibtex
       :after org-roam)
   #+end_src
** Org-clock
   #+begin_src emacs-lisp
     (use-package org-clock
       :after org
       :ensure org-plus-contrib
       :config
       (setq org-clock-clocked-in-display nil
	     org-clock-mode-line-total 'current))
   #+end_src
** Org-pomodoro
   番茄钟。但暂不使用。
   #+begin_src emacs-lisp :tangle no
     (use-package org-pomodoro
       :commands org-pomodoro
       :config
       (add-hook 'org-pomodoro-finished-hook
		 (lambda()
		   (notify-osx "Pomodoro completed!" "Time for a break.")))
       (add-hook 'org-pomodoro-break-finished-hook
		 (lambda()
		   (notify-osx "Pomodoro Short Break Finished!" "Ready for Another?")))
       (add-hook 'org-pomodoro-long-break-finished-hook
		 (lambda()
		   (notify-osx "Pomodoro Long Break Finished!" "Ready for Another?")))
       (add-hook 'org-pomodoro-killed-hook
		 (lambda()
		   (notify-osx "Pomodoro Killed!" "One does not simply kill a pomodoro!"))))
   #+end_src
** Org-protocol
   #+begin_src emacs-lisp
     (use-package org-protocol
  :after org
  :ensure org-plus-contrib)
   #+end_src
**
** Org-download
   #+begin_src emacs-lisp
     (use-package org-download
       :after org
       :config
       (setq org-download-method 'directory
	     org-image-actual-width nil
	     org-download-screenshot-method "screencapture -i %s"
	     org-download-display-inline-images 'posframe
	     ;; disable DOWNLOAD link
	     org-download-annotate-function (lambda (_link) "")
	     org-download-image-attr-list '("#+ATTR_HTML: :width 70% :align center"))
       (setq-default org-download-image-dir (concat org-directory "images/")))
   #+end_src
** Toc-org
   #+begin_src emacs-lisp
     (use-package toc-org
       :init
       (add-hook 'org-mode-hook 'toc-org-mode))
   #+end_src
** Org-media-note
   #+begin_src emacs-lisp
     (use-package org-media-note
       :hook (org-mode .  org-media-note-mode)
       :quelpa (org-media-note :fetcher github :repo "yuchen-lea/org-media-note" :branch "master")
       :config
       (require 'org-attach)
       (setq org-media-note-screenshot-image-dir (concat org-directory "images/org-media/")))
   #+end_src
** KeyBindings
   整体规划 org-mode 的按键。涉及到默认按键更改、全局按键、org-mode 按键。
   #+begin_src emacs-lisp
     (general-define-key
      :keymaps 'org-mode-map
      "C-c C-r" nil
      "C-c r" 'org-reveal
      "C-s-4" 'org-download-screenshot
      "H-v" 'org-media-note-hydra/body
      "C-c ]" 'org-ref-insert-link)

     (general-define-key
      :prefix "C-c C-r"
      "C-d" '(:ignore t :which-key "org-dailies")
      "C-d t" 'org-roam-dailies-goto-today
      "C-d d" 'org-roam-dailies-goto-date
      "C-d p" 'org-roam-dailies-goto-previous-note
      "C-d n" 'org-roam-dailies-goto-next-note
      "f" 'org-roam-node-find)

     (general-define-key
      :prefix "H-i"
      :keymaps 'org-mode-map
      "r" 'org-mac-skim-insert-page ;; skim
      "s"  'org-mac-safari-insert-frontmost-url ;; internet
      "f"  'org-mac-finder-insert-selected ;; finder
      "i" 'org-store-link)

     (general-define-key
      :keymaps 'org-mode-map
      "M-o" 'reader/goto-pdf-first-page-or-nov-toc
      "M-n" 'reader/scroll-up
      "M-p" 'reader/scroll-down)

     (general-define-key
      :keymaps 'nov-mode-map
      "M-n" 'nov-scroll-up
      "M-p" 'nov-scroll-down)

     (general-define-key
      :keymaps 'org-mode-map
      :prefix "C-c C-r"
      "r" 'org-roam-buffer-toggle
      "C-i" 'org-roam-node-insert
      "g" 'org-roam-graph
      "i" '(:ignore t :which-key "add property")
      "i a" 'org-roam-alias-add
      "i r" 'org-roam-ref-add
      "i t" 'org-roam-tag-add
      "d" '(:ignore t :which-key "remove property")
      "d a" 'org-roam-alias-remove
      "d r" 'org-roam-ref-remove
      "d t" 'org-roam-tag-remove)
     (general-define-key
      :keymaps 'bibtex-mode-map
      "H-b" 'org-ref-bibtex-hydra/body)


     (general-define-key
      :keymaps 'org-roam-mode-map
      [mouse-1] 'org-roam-visit-thing)
   #+end_src
* Ivy
  =ivy-rich= 经过几天试用，发现并不太方便，暂时关闭。
  注意，需要在安装完成后，手动调用 =all-the-icons-install= 。
  #+begin_src emacs-lisp :tangle no
    (use-package ivy-rich
      :hook (all-the-icons-ivy-rich-mode . ivy-rich-mode)
      :init
      (setq ivy-virtual-abbreviate 'full
	    ivy-rich-switch-buffer-align-virtual-buffer t)
      (add-hook 'ivy-rich-mode-hook (lambda ()
				      ;; 因为文件在 project 中的路径较深，所以简化 counsel-projectile-find-file 的排版，仅显示图标、文件路径及文件大小
				      (ivy-rich-set-columns
				       'counsel-projectile-find-file
				       '((all-the-icons-ivy-rich-file-icon)
					 (counsel-projectile-find-file-transformer (:width 0.5))
					 (all-the-icons-ivy-rich-project-file-size (:width 0.1 :face all-the-icons-ivy-rich-size-face))))
				      ))
      :config
      (setcdr (assq t ivy-format-functions-alist) 'ivy-format-function-line))
    (use-package all-the-icons-ivy-rich
      :after counsel-projectile
      :init
      (add-hook 'after-init-hook 'all-the-icons-ivy-rich-mode))

  #+end_src

  #+begin_src emacs-lisp
    (use-package ivy
      :defer t
      :init
      (add-hook 'after-init-hook 'ivy-mode)
      (setq ivy-use-virtual-buffers t
	    enable-recursive-minibuffers t)
      :general
      (general-define-key
       :keymaps 'ivy-minibuffer-map
       [escape] 'minibuffer-keyboard-quit
       "C-<return>" 'ivy-immediate-done)
      :config
      (meow-leader-define-key
       '("/" . counsel-rg)))

    (use-package swiper
      :defer t
      :commands (swiper)
      :init
      (general-define-key
       "C-s" 'counsel-grep-or-swiper))

    (use-package counsel
      :hook (ivy-mode . counsel-mode)
      :config
      (meow-leader-define-key
       '("ff" . counsel-find-file)
       '("fb" . counsel-switch-buffer)
       '("fr" . counsel-buffer-or-recentf)))

    (use-package all-the-icons-ivy
      :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))

    (use-package wgrep
      :after ivy
      :config
      (setq wgrep-auto-save-buffer t))
  #+end_src
* Restart Emacs
  由于暂时采用 server client 启动方式，故不再需要 restart emacs 。
    #+begin_src emacs-lisp :tangle no
      (use-package restart-emacs
        :defer t
        :commands (restart-emacs))
  #+end_src
* calibredb
    #+begin_src emacs-lisp
      (use-package calibredb
	:defer t
	:quelpa (calibredb :fetcher github :repo "chenyanming/calibredb.el" :branch "develop")
	:commands (calibredb)
	:config
	(setq calibredb-size-show t
	      ;;calibredb-format-all-the-icons t
	      calibredb-id-width 4
	      calibredb-title-width 40
	      calibredb-date-width 0
	      calibredb-root-dir private/book-directory
	      calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir)
	      calibredb-library-alist '(private/book-directory)))
  #+end_src
* 剪贴板
  #+begin_src emacs-lisp
    (use-package simpleclip
      :init
      (simpleclip-mode t))
  #+end_src
* 使用 Server Client 方式启动 emacs
** 开机启动
   新建 plist 文件如下，然后使用 =launchctl start gnu.emacs.daemon= 激活。
   #+begin_src xml :tangle no
     <!-- save in ~/Library/LaunchAgents/gnu.emacs.daemon.plist-->
     <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
            "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
         <plist version="1.0">
          <dict>
            <key>Label</key>
            <string>gnu.emacs.daemon</string>
            <key>ProgramArguments</key>
            <array>
              <string>/usr/local/bin/emacs</string>
              <string>--daemon=kenton</string>
            </array>
           <key>RunAtLoad</key>
           <true/>
           <key>ServiceDescription</key>
           <string>Gnu Emacs Daemon</string>
          </dict>
        </plist>
   #+end_src
** 启动 frame
   使用 alfred workflow ，通过执行脚本的方式启动 frame 。注意，这个 frame 并没有初始化的时间。
   #+begin_src shell :tangle no
     /usr/local/bin/emacsclient --socket-name=kenton --no-wait -c
   #+end_src
** 关闭 frame
   这里有一个问题，默认的 =s-q= 快捷键是关闭 emacs ，这个行为会关闭 server ，影响我们这里的机制，所以需要重新定义。
   #+begin_src emacs-lisp
     (general-define-key
      "s-q" 'delete-frame)
   #+end_src
* 自动补全
  =smartparens= 暂时没有找到如何更改包裹，只找到另一个插件[[https://github.com/cute-jumper/embrace.el][embrace]] ，但暂时先不考虑。
  可以开始考虑 embrace 了。。。
  #+begin_src emacs-lisp
    (use-package company
      :defer t
      :init
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-idle-delay 0.3
	    company-require-match 'never
	    company-tooltip-align-annotations t
	    company-dabbrev-downcase nil
	    company-dabbrev-ignore-case nil
	    company-minimum-prefix-length 1)
      (setq company-backend
	    '(company-keywords
	      company-elisp
	      company-files
	      company-capf
	      company-yasnippet
	      company-dabbrev-code
	      company-dabbrev))
      :general
      (general-define-key
       :keymaps 'company-active-map
       "<tab>" 'company-complete-selection
       "<RET>" nil
       "<return>" nil
       "C-w" nil
       "C-n" 'company-select-next
       "C-p" 'company-select-previous))

    (use-package smartparens
      :hook (prog-mode . smartparens-mode)
      :hook (org-mode . smartparens-mode))

    (use-package embrace
      :defer t
      :commands (embrace-add embrace-delete embrace-change embrace-commander)
      :init
      (meow-leader-define-key
       '("sc" . embrace-change)
       '("sd" . embrace-delete)
       '("ss" . embrace-add)))

    (use-package yasnippet
      :defer t
      :hook (prog-mode . yas-minor-mode)
      :hook (org-mode . yas-minor-mode))

    (use-package yasnippet-snippets
      :defer t
      :hook (yas-minor-mode . yas-reload-all))
  #+end_src
* prescient
  #+begin_src emacs-lisp
    (use-package prescient
      :after (ivy company)
      :config
      (setq prescient-filter-method 'regexp))

    (use-package ivy-prescient
      :after (prescient counsel)
      :hook (ivy-mode . ivy-prescient-mode)
      :config
      (setq ivy-prescient-retain-classic-highlighting t))

    (use-package company-prescient
      :after prescient
      :hook (company-mode . company-prescient-mode))

  #+end_src
* navigation
  #+begin_src emacs-lisp
    (use-package avy
      :commands (avy-goto-char-2 avy-goto-line)
      :init
      (meow-leader-define-key
       '("fc" . avy-goto-char-2)
       '("fl" . avy-goto-line))
      :config
      (setq avy-all-windows nil
            avy-background t))
  #+end_src
* Projectile
  #+begin_src emacs-lisp
    (use-package projectile
      :init
      (add-hook 'after-init-hook 'projectile-mode)
      (setq project-cache-file "~/.emacs.d/projectile.cache"
	    project-know-projects-file "~/.emacs.d/projectile-bookmarks.eld"
	    projectile-project-search-path '("~/kenton/")
	    projectile-completion-system 'ivy)
      :config
      (projectile-discover-projects-in-search-path))
    (use-package counsel-projectile
      :init
      (add-hook 'after-init-hook 'counsel-projectile-mode)
      (meow-leader-define-key
       '("pf" . counsel-projectile-find-file)
       '("pl" . counsel-projectile-switch-project)))
  #+end_src
* Magit
  #+begin_src emacs-lisp
	    (use-package magit
	      :commands (magit-status magit-blame)
	      :init
	      (general-define-key
	       "C-M-s" 'magit-status
	       "C-M-b" 'magit-blame)
	      :config
	      (general-define-key
	       :keymaps 'magit-mode-map
	       "s-<return>" 'magit-diff-visit-file-other-window
	       "C-c C-k" 'magit-discard
	       "x" 'meow-line))
  #+end_src
* Programming Language
** Elixir
   虽说是主力语言，但配置并不算多。
   #+begin_src emacs-lisp
     (use-package elixir-mode
       :defer t
       :config
       (add-hook 'elixir-mode-hook
		 (lambda() (add-hook 'before-save-hook 'elixir-format nil t)))

       (defun +reset-mixfmt-args ()
	 (let* ((formatter-directory (locate-dominating-file default-directory ".formatter.exs"))
		(formatter-file (concat formatter-directory ".formatter.exs")))
	   (if formatter-directory
	       (setq elixir-format-arguments (list "--dot-formatter" formatter-file))
	     (setq elixir-format-arguments nil))))

       (add-hook 'elixir-format-hook #'+reset-mixfmt-args))

     (use-package exunit
       :defer t
       :after elixir-mode
       :config
       :commands (exunit-verify-all
		  exunit-verify
		  exunit-verify-all-in-umbrella
		  exunit-verify-single
		  exunit-rerun
		  exunit-toggle-file-and-test)
       :general
       (general-define-key
	:keymaps 'elixir-mode-map
	:keymaps 'exunit-compilation-mode-map
	"C-c C-t a" 'exunit-verify-all
	"C-c C-t t" 'exunit-verify-single
	"C-c C-t b" 'exunit-verify
	"C-c C-t r" 'exunit-rerun
	"C-c C-t f" 'exunit-toggle-file-and-test
	))
   #+end_src
** Haskell
   感觉函数式编程绕不开 Haskell ，所以尝试下。
   #+begin_src emacs-lisp
     (use-package haskell-mode
       :defer t
       :init
       (add-hook 'haskell-mode-hook 'lsp)
       (add-hook 'haskell-literate-mode-hook 'lsp)
       :config
       (setq haskell-process-type 'stack-ghci))

     (use-package lsp-haskell
       :defer t)
   #+end_src
** Common Lisp
   #+begin_src emacs-lisp
     (use-package sly
       :defer t
       :init
       (setq inferior-lisp-program "/Users/smartepsh/.asdf/shims/sbcl"
	     org-babel-lisp-eval-fn 'sly-eval))
   #+end_src
* LSP
  尝试使用 lsp-mode ，之前使用的是 nox ，但见其许久未更新，考虑切换。
  #+begin_src emacs-lisp
	(use-package lsp-mode
	  :defer t
	  :init
	  (setq lsp-keymap-prefix "s-l")
	  (add-to-list 'exec-path (concat private/config-directory "elixir-ls"))
	  :hook (elixir-mode . lsp)
	  :hook (lsp-mode . lsp-enable-which-key-integration)
	  :config
	  (setq lsp-headerline-breadcrumb-enable nil
		lsp-file-watch-threshold 2000)
	  (meow-leader-define-key
	   '("." . lsp-find-definition)
	   '("," . xref-pop-marker-stack))
	  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.elixir_ls\\'")
	  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\deps\\'"))

	(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
	;;(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  #+end_src
* FlySpell 拼写错误检查
  在 [[https://www.emacswiki.org/emacs/FlySpell][我的Wiki： Fly Spell]] 找到了自建词典的使用方法，见 =flyspell-learn-work-at-point= 方法。该方法会将收录的新词保存在 =~/.hunspell_en_US= 文件内，我会将该文件链接到 =.emacs.d= 项目中，方便同步。
  #+begin_src emacs-lisp
    (use-package flyspell
      :ensure-system-package hunspell
      :hook (text-mode . flyspell-mode)
      :hook (prog-mode . flyspell-prog-mode)
      :init
      (setenv "LANG" "en_US")
      (setq flyspell-issue-welcome-flag nil)
      :config
      (setq ispell-program-name (executable-find "hunspell")
	    ispell-dictionary "en_US"
	    ispell-local-dictionary-alist '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
      (global-set-key (kbd "C-c s") 'flyspell-learn-word-at-point)

      (defun flyspell-learn-word-at-point ()
	"Takes the highlighted word at point -- nominally a misspelling -- and inserts it into the personal/private dictionary, such that it is known and recognized as a valid word in the future."
	(interactive)
	(let ((current-location (point))
	      (word (flyspell-get-word)))
	  (when (consp word)
	    (flyspell-do-correct
	     'save nil
	     (car word)
	     current-location
	     (cadr word)
	     (caddr word)
	     current-location)))))

    (use-package flyspell-correct-ivy
      :after flyspell-correct)

    (use-package flyspell-correct
      :commands (flyspell-correct-wrapper)
      :init
      (setq flyspell-correct-interface 'flyspell-correct-ivy)
      :general
      (general-define-key
       :keymaps 'flyspell-mode-map
       "C-;" 'flyspell-correct-wrapper
       "C-," nil
       "C-'" 'flyspell-learn-word-at-point))
  #+end_src
* 资源管理器
  使用默认的 dired 足矣。
  #+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      :ensure-system-package (gls . coreutils)
      :commands (dired-jump dired-jump-other-window)
      :init
      (setq dired-dwim-target t
	    dired-listing-switches "-alh"
	    insert-directory-program "gls"
	    dired-use-ls-dired t)
      :config
      (meow-leader-define-key
       '("fd" . dired-jump)
       '("fD" . dired-jump-other-window)))
  #+end_src
* 错误检查
  lsp-mode 推荐使用 flycheck ，那我们尝试简单配置一下。使用 posframe 显示信息。
  #+begin_src emacs-lisp
    (use-package flycheck
      :defer t
      :init
      (add-hook 'prog-mode-hook 'flycheck-mode)
      (add-hook 'flycheck-mode-hook 'flycheck-posframe-mode))

    (use-package flycheck-posframe
      :after flycheck)
  #+end_src
* 注释
  #+begin_src emacs-lisp
    (use-package evil-nerd-commenter
      :defer t
      :commands (evilnc-comment-or-uncomment-lines)
      :init
      (general-define-key
       "C-M-c" 'evilnc-comment-or-uncomment-lines))
  #+end_src
